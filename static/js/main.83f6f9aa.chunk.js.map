{"version":3,"sources":["components/Effects.tsx","components/Lights.tsx","components/Model.tsx","components/FallenAngel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Effects","datas","useController","useState","lightMesh","setLightMesh","scene","useThree","useEffect","userData","refs","lightMeshRef","enabled","sun","current","useControls","samples","value","min","max","step","density","decay","weight","exposure","blur","Lights","intensity","position","PointLight","lightRef","useRef","useHelper","THREE","helper","meshRef","lookAt","ref","args","size","color","side","lighten","toHexString","castShadow","ModelPath","process","Model","props","rotate","group","useGLTF","nodes","materials","useFrame","rotation","y","dispose","receiveShadow","geometry","Mesh_0001","material","preload","FallenAngel","camera","fov","aspect","window","innerWidth","innerHeight","near","far","dpr","devicePixelRatio","shadows","attach","Stats","OrbitControls","fallback","App","style","width","height","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83f6f9aa.chunk.js","sourcesContent":["import { useControls } from 'leva';\r\nimport React, { useEffect, useState, VFC } from 'react';\r\nimport THREE from 'three';\r\nimport { useThree } from '@react-three/fiber';\r\nimport { EffectComposer, GodRays } from '@react-three/postprocessing';\r\n\r\nexport const Effects: VFC = () => {\r\n\t// add controller\r\n\tconst datas = useController()\r\n\r\n\tconst [lightMesh, setLightMesh] = useState<\r\n\t\tReact.MutableRefObject<THREE.Mesh<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>\r\n\t>()\r\n\r\n\tconst { scene } = useThree()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (scene.userData.refs && scene.userData.refs.lightMesh) {\r\n\t\t\tconst lightMeshRef = scene.userData.refs.lightMesh\r\n\t\t\tsetLightMesh(lightMeshRef)\r\n\t\t}\r\n\t}, [scene.userData.refs])\r\n\r\n\treturn (\r\n\t\t<EffectComposer>\r\n\t\t\t<>{lightMesh && datas.enabled && <GodRays sun={lightMesh.current!} {...datas} />}</>\r\n\t\t</EffectComposer>\r\n\t)\r\n}\r\n\r\nconst useController = () => {\r\n\tconst datas = useControls('godray', {\r\n\t\tenabled: true,\r\n\t\tsamples: {\r\n\t\t\tvalue: 100,\r\n\t\t\tmin: 10,\r\n\t\t\tmax: 200,\r\n\t\t\tstep: 10\r\n\t\t},\r\n\t\tdensity: {\r\n\t\t\tvalue: 0.96,\r\n\t\t\tmin: 0,\r\n\t\t\tmax: 1,\r\n\t\t\tstep: 0.01\r\n\t\t},\r\n\t\tdecay: {\r\n\t\t\tvalue: 0.98,\r\n\t\t\tmin: 0,\r\n\t\t\tmax: 1,\r\n\t\t\tstep: 0.01\r\n\t\t},\r\n\t\tweight: {\r\n\t\t\tvalue: 0.3,\r\n\t\t\tmin: 0,\r\n\t\t\tmax: 1,\r\n\t\t\tstep: 0.01\r\n\t\t},\r\n\t\texposure: {\r\n\t\t\tvalue: 1,\r\n\t\t\tmin: 0,\r\n\t\t\tmax: 1,\r\n\t\t\tstep: 0.01\r\n\t\t},\r\n\t\tblur: {\r\n\t\t\tvalue: 0,\r\n\t\t\tmin: 0,\r\n\t\t\tmax: 1,\r\n\t\t\tstep: 0.01\r\n\t\t}\r\n\t})\r\n\treturn datas\r\n}\r\n","import { color } from 'csx';\r\nimport { useControls } from 'leva';\r\nimport React, { useEffect, useRef, VFC } from 'react';\r\nimport * as THREE from 'three';\r\nimport { useHelper } from '@react-three/drei';\r\nimport { useThree } from '@react-three/fiber';\r\n\r\nexport const Lights: VFC = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ambientLight intensity={0.05} />\r\n\t\t\t<PointLight position={[0, 3, -5]} />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\ntype PointLightProps = {\r\n\tposition: [number, number, number]\r\n}\r\n\r\nconst PointLight: VFC<PointLightProps> = ({ position }) => {\r\n\t// add controller\r\n\tconst datas = useController()\r\n\r\n\t// add helper\r\n\tconst lightRef = useRef<THREE.Light>()\r\n\tuseHelper(lightRef, THREE.PointLightHelper, [datas.helper ? 1 : 0])\r\n\r\n\tconst meshRef = useRef<THREE.Mesh>()\r\n\tconst { scene } = useThree()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!scene.userData.refs) scene.userData.refs = {}\r\n\t\tscene.userData.refs.lightMesh = meshRef\r\n\t}, [scene.userData])\r\n\r\n\tuseEffect(() => {\r\n\t\tmeshRef.current!.lookAt(0, 0, 0)\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<mesh ref={meshRef} position={position}>\r\n\t\t\t<circleGeometry args={[datas.size, 64]} />\r\n\t\t\t<meshBasicMaterial color={datas.color} side={THREE.DoubleSide} />\r\n\t\t\t<pointLight\r\n\t\t\t\tref={lightRef}\r\n\t\t\t\tcolor={color(datas.color).lighten(0.5).toHexString()}\r\n\t\t\t\tintensity={1}\r\n\t\t\t\tshadow-mapSize-width={512}\r\n\t\t\t\tshadow-mapSize-height={512}\r\n\t\t\t\tcastShadow\r\n\t\t\t/>\r\n\t\t</mesh>\r\n\t)\r\n}\r\n\r\nconst useController = () => {\r\n\tconst datas = useControls('light', {\r\n\t\tsize: {\r\n\t\t\tvalue: 4.5,\r\n\t\t\tmin: 0.2,\r\n\t\t\tmax: 10,\r\n\t\t\tstep: 0.1\r\n\t\t},\r\n\t\tcolor: '#525252',\r\n\t\thelper: false\r\n\t})\r\n\treturn datas\r\n}\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport { useControls } from 'leva';\r\nimport React, { useRef, VFC } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { useGLTF } from '@react-three/drei';\r\nimport { useFrame } from '@react-three/fiber';\r\n\r\ntype GLTFResult = GLTF & {\r\n\tnodes: {\r\n\t\tMesh_0001: THREE.Mesh\r\n\t}\r\n\tmaterials: {\r\n\t\t['Low_chapeau1.001']: THREE.MeshStandardMaterial\r\n\t}\r\n}\r\n\r\nconst ModelPath = process.env.PUBLIC_URL + '/assets/fallen_angel.glb'\r\n\r\nexport const Model: VFC<JSX.IntrinsicElements['group']> = props => {\r\n\t// add controller\r\n\tconst datas = useControls('model', {\r\n\t\trotate: false\r\n\t})\r\n\r\n\tconst group = useRef<THREE.Group>()\r\n\tconst { nodes, materials } = (useGLTF(ModelPath) as unknown) as GLTFResult\r\n\r\n\tmaterials['Low_chapeau1.001'].side = THREE.FrontSide\r\n\r\n\tuseFrame(() => {\r\n\t\tif (datas.rotate) {\r\n\t\t\tgroup.current!.rotation.y += 0.002\r\n\t\t}\r\n\t})\r\n\r\n\treturn (\r\n\t\t<group ref={group} {...props} dispose={null}>\r\n\t\t\t<mesh\r\n\t\t\t\tcastShadow\r\n\t\t\t\treceiveShadow\r\n\t\t\t\tgeometry={nodes.Mesh_0001.geometry}\r\n\t\t\t\tmaterial={materials['Low_chapeau1.001']}\r\n\t\t\t/>\r\n\t\t</group>\r\n\t)\r\n}\r\n\r\nuseGLTF.preload(ModelPath)\r\n","import React, { Suspense, VFC } from 'react';\r\nimport { OrbitControls, Stats } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport { Effects } from './Effects';\r\nimport { Lights } from './Lights';\r\nimport { Model } from './Model';\r\n\r\nexport const FallenAngel: VFC = () => {\r\n\treturn (\r\n\t\t<Canvas\r\n\t\t\tcamera={{\r\n\t\t\t\tposition: [0, -1.5, 3],\r\n\t\t\t\tfov: 50,\r\n\t\t\t\taspect: window.innerWidth / window.innerHeight,\r\n\t\t\t\tnear: 0.1,\r\n\t\t\t\tfar: 2000\r\n\t\t\t}}\r\n\t\t\tdpr={window.devicePixelRatio}\r\n\t\t\tshadows>\r\n\t\t\t{/* canvas color */}\r\n\t\t\t<color attach=\"background\" args={['#000']} />\r\n\t\t\t{/* fps */}\r\n\t\t\t<Stats />\r\n\t\t\t{/* camera controller */}\r\n\t\t\t<OrbitControls />\r\n\t\t\t{/* lights */}\r\n\t\t\t<Lights />\r\n\t\t\t{/* objects */}\r\n\t\t\t<Suspense fallback={null}>\r\n\t\t\t\t<Model position={[0, 0.3, 0]} />\r\n\t\t\t</Suspense>\r\n\t\t\t{/* effects */}\r\n\t\t\t<Effects />\r\n\t\t\t{/* helper */}\r\n\t\t\t{/* <axesHelper /> */}\r\n\t\t</Canvas>\r\n\t)\r\n}\r\n","import React, { VFC } from 'react';\nimport { FallenAngel } from './components/FallenAngel';\n\nexport const App: VFC = () => {\n\treturn (\n\t\t<div style={{ width: '100vw', height: '100vh', backgroundColor: '#000' }}>\n\t\t\t<FallenAngel />\n\t\t</div>\n\t)\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}